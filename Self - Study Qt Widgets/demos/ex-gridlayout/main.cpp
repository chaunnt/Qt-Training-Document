/*************************************************************************
 *
 * Copyright (c) 2016 The Qt Company
 * All rights reserved.
 *
 * See the LICENSE.txt file shipped along with this file for the license.
 *
 *************************************************************************/

#include <QtWidgets>

class FontSelector : public QWidget
{
    Q_OBJECT

public:
    FontSelector(QWidget *parent = Q_NULLPTR)
        : QWidget(parent)
    {
        QGridLayout *layout = new QGridLayout;

        // create row 0
        layout->addWidget(new QLabel("Font"),       0, 0);
        layout->addWidget(new QLabel("Font Style"), 0, 2);
        layout->addWidget(new QLabel("Size"),       0, 4);

        // setup font-family list widget
        m_familyList = new QListWidget(this);
        m_familyList->addItems(m_database.families());
        connect(
            m_familyList, &QListWidget::currentTextChanged,
            this, &FontSelector::onFamilyChanged
        );

        // setup style list widget
        m_styleList = new QListWidget(this);
        connect(
            m_styleList, &QListWidget::currentTextChanged,
            this, &FontSelector::onStyleChanged
        );

        // setup size list widget
        m_sizeList = new QListWidget(this);

        // layout list widgets
        layout->addWidget(m_familyList, 1, 0);
        layout->addWidget(m_styleList,  1, 2);
        layout->addWidget(m_sizeList,   1, 4);

        // use column width to add extra space
        layout->setColumnMinimumWidth(1, 32);
        layout->setColumnMinimumWidth(3, 32);

        setLayout(layout);
    }

private slots:
    // update style list, when font-family changes
    void onFamilyChanged(const QString &family)
    {
        qDebug() << "onFamilyChanged();";
        QStringList styles = m_database.styles(family);
        m_styleList->clear();
        m_styleList->addItems(styles);
    }

    // update size list, when style changes
    void onStyleChanged(const QString &style)
    {
        qDebug() << "onStyleChanged();";
        QListWidgetItem *item = m_familyList->currentItem();
        if(!item) { return; }
        QString family = item->text();
        QList<int> sizes = m_database.smoothSizes(family, style);
        m_sizeList->clear();
        foreach(int size, sizes) {
            m_sizeList->addItem(QString::number(size));
        }
    }

private:
    QFontDatabase m_database;
    QListWidget *m_familyList;
    QListWidget *m_styleList;
    QListWidget *m_sizeList;
};

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    FontSelector window;
    window.show();
    return app.exec();
}

// Include meta-object information generated by moc
#include "main.moc"
